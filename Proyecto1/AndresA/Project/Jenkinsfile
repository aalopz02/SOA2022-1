def doLint(){
	try {
		sh ( script:"cd Proyecto1/AndresA/Project && pylint cosa.py --disable=all --enable=E,W,C0116 --reports=no module --output-format=parseable > pylint.log", returnStatus:true)
		echo "lint log generated"
		def score = sh ( script: "cd Proyecto1/AndresA/Project && echo | python3 logParser.py",
			returnStdout: true
			).trim()
		echo "score: ${score}"
		float castedScore = Float.parseFloat(score)
		return castedScore
	} catch (Exception ex) {
		echo "error in lint: ${ex}"
		return 0
	}
}

def doTests(){
	def testResult = sh ( script: "cd Proyecto1/AndresA/Project && echo | python3 runTests.py",
			returnStdout: true
			).trim()
	echo "Testing results: ${testResult}"
	return testResult
}

pipeline {
    agent any
    stages {
		stage('check') {
            steps {
				script {
					if (env.CHANGE_ID) {
						score = doLint()
						if (score >= 7){
							echo 'lint ok'
							sh (script:"rm Proyecto1/AndresA/Project/pylint.log")
							pullRequest.comment("Lint ok, got score of: ${score}")
						} else {
							pullRequest.comment("Lint failed, got score of: ${score}. Check log for details")
							echo "Lint failed, got score of: ${score}. Check log for details"
							sh 'exit 1'
						}
					}
				}
            }
        }
		stage ('tests'){
			steps{
				script {
					if (env.CHANGE_ID) {
						testResult = doTests()
						if (testResult == "0"){
						echo "Testing ok"
							pullRequest.comment("Testing ok")
						} else {
							pullRequest.comment("Testing failed, error: ${testResult}")
							echo "Testing failed, check pr for details"
							sh 'exit 1'
						}
					}
					
				}
			}
		}
		stage ('plan'){
			steps{
				echo 'CHANGE_ID: ' + env.CHANGE_ID
			}
		}
    }
}